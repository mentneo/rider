{"ast":null,"code":"import { createUserWithEmailAndPassword, updateProfile } from 'firebase/auth';\nimport { doc, getDoc, setDoc } from 'firebase/firestore';\nimport { auth, db } from '../firebase/config';\nimport { toast } from 'react-toastify';\n\n// Function to create or verify the admin account\nexport const setupAdminAccount = async () => {\n  const adminEmail = \"mentneo6@gmail.com\";\n  const adminPassword = \"itsmeiamabhi\";\n  const adminName = \"Admin User\";\n  try {\n    // First check if admin already exists in the database\n    const adminQuery = doc(db, 'users', 'admin');\n    const adminDoc = await getDoc(adminQuery);\n    if (!adminDoc.exists()) {\n      console.log('Creating admin account...');\n      try {\n        // Create user with Firebase Auth\n        const userCredential = await createUserWithEmailAndPassword(auth, adminEmail, adminPassword);\n        const user = userCredential.user;\n\n        // Update profile with name\n        await updateProfile(user, {\n          displayName: adminName\n        });\n\n        // Store in Firestore\n        await setDoc(doc(db, 'users', user.uid), {\n          uid: user.uid,\n          name: adminName,\n          email: adminEmail,\n          role: 'admin',\n          createdAt: new Date().toISOString()\n        });\n        console.log('Admin account created successfully');\n        toast.success('Admin account created successfully');\n        return true;\n      } catch (error) {\n        // If account already exists but not in our database\n        if (error.code === 'auth/email-already-in-use') {\n          console.log('Admin email already exists, trying to sign in...');\n\n          // Handle existing email differently - we'd need admin intervention\n          toast.warning('Admin account exists but not properly set up. Please contact support.');\n        } else {\n          console.error('Error creating admin:', error);\n          toast.error('Failed to create admin account: ' + error.message);\n        }\n        return false;\n      }\n    } else {\n      console.log('Admin account already exists');\n      return true;\n    }\n  } catch (error) {\n    console.error('Error checking admin account:', error);\n    toast.error('Error checking admin account: ' + error.message);\n    return false;\n  }\n};\n\n// Function to ensure admin has proper role in database\nexport const verifyAdminRole = async uid => {\n  try {\n    const userDoc = await getDoc(doc(db, 'users', uid));\n    if (userDoc.exists() && userDoc.data().email === \"mentneo6@gmail.com\" && userDoc.data().role !== 'admin') {\n      // Update role to admin if it's not set\n      await setDoc(doc(db, 'users', uid), {\n        role: 'admin',\n        updatedAt: new Date().toISOString()\n      }, {\n        merge: true\n      });\n      console.log('Admin role verified and updated');\n    }\n  } catch (error) {\n    console.error('Error verifying admin role:', error);\n  }\n};","map":{"version":3,"names":["createUserWithEmailAndPassword","updateProfile","doc","getDoc","setDoc","auth","db","toast","setupAdminAccount","adminEmail","adminPassword","adminName","adminQuery","adminDoc","exists","console","log","userCredential","user","displayName","uid","name","email","role","createdAt","Date","toISOString","success","error","code","warning","message","verifyAdminRole","userDoc","data","updatedAt","merge"],"sources":["/Users/yeduruabhiram/Desktop/chiru babai/src/utils/adminSetup.js"],"sourcesContent":["import { createUserWithEmailAndPassword, updateProfile } from 'firebase/auth';\nimport { doc, getDoc, setDoc } from 'firebase/firestore';\nimport { auth, db } from '../firebase/config';\nimport { toast } from 'react-toastify';\n\n// Function to create or verify the admin account\nexport const setupAdminAccount = async () => {\n  const adminEmail = \"mentneo6@gmail.com\";\n  const adminPassword = \"itsmeiamabhi\";\n  const adminName = \"Admin User\";\n\n  try {\n    // First check if admin already exists in the database\n    const adminQuery = doc(db, 'users', 'admin');\n    const adminDoc = await getDoc(adminQuery);\n\n    if (!adminDoc.exists()) {\n      console.log('Creating admin account...');\n      \n      try {\n        // Create user with Firebase Auth\n        const userCredential = await createUserWithEmailAndPassword(\n          auth, \n          adminEmail, \n          adminPassword\n        );\n        \n        const user = userCredential.user;\n        \n        // Update profile with name\n        await updateProfile(user, { displayName: adminName });\n        \n        // Store in Firestore\n        await setDoc(doc(db, 'users', user.uid), {\n          uid: user.uid,\n          name: adminName,\n          email: adminEmail,\n          role: 'admin',\n          createdAt: new Date().toISOString()\n        });\n        \n        console.log('Admin account created successfully');\n        toast.success('Admin account created successfully');\n        \n        return true;\n      } catch (error) {\n        // If account already exists but not in our database\n        if (error.code === 'auth/email-already-in-use') {\n          console.log('Admin email already exists, trying to sign in...');\n          \n          // Handle existing email differently - we'd need admin intervention\n          toast.warning('Admin account exists but not properly set up. Please contact support.');\n        } else {\n          console.error('Error creating admin:', error);\n          toast.error('Failed to create admin account: ' + error.message);\n        }\n        return false;\n      }\n    } else {\n      console.log('Admin account already exists');\n      return true;\n    }\n  } catch (error) {\n    console.error('Error checking admin account:', error);\n    toast.error('Error checking admin account: ' + error.message);\n    return false;\n  }\n};\n\n// Function to ensure admin has proper role in database\nexport const verifyAdminRole = async (uid) => {\n  try {\n    const userDoc = await getDoc(doc(db, 'users', uid));\n    \n    if (userDoc.exists() && userDoc.data().email === \"mentneo6@gmail.com\" && userDoc.data().role !== 'admin') {\n      // Update role to admin if it's not set\n      await setDoc(doc(db, 'users', uid), {\n        role: 'admin',\n        updatedAt: new Date().toISOString()\n      }, { merge: true });\n      \n      console.log('Admin role verified and updated');\n    }\n  } catch (error) {\n    console.error('Error verifying admin role:', error);\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}