{"ast":null,"code":"var _jsxFileName = \"/Users/yeduruabhiram/Desktop/chiru babai/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, onAuthStateChanged, updateProfile } from 'firebase/auth';\nimport { doc, getDoc, setDoc } from 'firebase/firestore';\nimport { auth, db, requestNotificationPermission } from '../firebase/config';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport function useAuth() {\n  _s();\n  return useContext(AuthContext);\n}\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function AuthProvider({\n  children\n}) {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [userRole, setUserRole] = useState(null);\n  const [loading, setLoading] = useState(true);\n  async function register(email, password, name, role = 'customer') {\n    try {\n      // Create user in Firebase Auth\n      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n      const user = userCredential.user;\n\n      // Update profile with display name\n      await updateProfile(user, {\n        displayName: name\n      });\n\n      // Add user data to Firestore\n      await setDoc(doc(db, 'users', user.uid), {\n        uid: user.uid,\n        name,\n        email,\n        role,\n        createdAt: new Date().toISOString()\n      });\n\n      // Request notification permission and save FCM token\n      const fcmToken = await requestNotificationPermission();\n      if (fcmToken) {\n        await setDoc(doc(db, 'users', user.uid), {\n          fcmToken\n        }, {\n          merge: true\n        });\n      }\n      return user;\n    } catch (error) {\n      console.error('Error in register:', error);\n      throw error;\n    }\n  }\n  async function login(email, password) {\n    try {\n      const userCredential = await signInWithEmailAndPassword(auth, email, password);\n\n      // After successful login, request notification permission and save FCM token\n      const fcmToken = await requestNotificationPermission();\n      if (fcmToken && userCredential.user) {\n        await setDoc(doc(db, 'users', userCredential.user.uid), {\n          fcmToken,\n          lastLogin: new Date().toISOString()\n        }, {\n          merge: true\n        });\n\n        // Show welcome back notification\n        if (Notification.permission === 'granted') {\n          new Notification('Welcome back!', {\n            body: `You've successfully logged in to Car Booking App`,\n            icon: '/logo192.png'\n          });\n        }\n      }\n      return userCredential.user;\n    } catch (error) {\n      console.error('Error in login:', error);\n      throw error;\n    }\n  }\n  function logout() {\n    return signOut(auth);\n  }\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async user => {\n      setCurrentUser(user);\n      if (user) {\n        try {\n          // Get user role from Firestore\n          const userDoc = await getDoc(doc(db, 'users', user.uid));\n          if (userDoc.exists()) {\n            setUserRole(userDoc.data().role);\n          } else {\n            setUserRole('customer'); // Default role\n          }\n        } catch (error) {\n          console.error('Error fetching user role:', error);\n          setUserRole('customer'); // Default role on error\n        }\n      } else {\n        setUserRole(null);\n      }\n      setLoading(false);\n    });\n    return unsubscribe;\n  }, []);\n  const value = {\n    currentUser,\n    userRole,\n    loading,\n    register,\n    login,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n}\n_s2(AuthProvider, \"oJcdYGl4IB/GVvCCnTftfffWqnQ=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","onAuthStateChanged","updateProfile","doc","getDoc","setDoc","auth","db","requestNotificationPermission","toast","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","currentUser","setCurrentUser","userRole","setUserRole","loading","setLoading","register","email","password","name","role","userCredential","user","displayName","uid","createdAt","Date","toISOString","fcmToken","merge","error","console","login","lastLogin","Notification","permission","body","icon","logout","unsubscribe","userDoc","exists","data","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/yeduruabhiram/Desktop/chiru babai/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { \n  createUserWithEmailAndPassword, \n  signInWithEmailAndPassword, \n  signOut, \n  onAuthStateChanged,\n  updateProfile\n} from 'firebase/auth';\nimport { doc, getDoc, setDoc } from 'firebase/firestore';\nimport { auth, db, requestNotificationPermission } from '../firebase/config';\nimport { toast } from 'react-toastify';\n\nconst AuthContext = createContext();\n\nexport function useAuth() {\n  return useContext(AuthContext);\n}\n\nexport function AuthProvider({ children }) {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [userRole, setUserRole] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  async function register(email, password, name, role = 'customer') {\n    try {\n      // Create user in Firebase Auth\n      const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n      const user = userCredential.user;\n      \n      // Update profile with display name\n      await updateProfile(user, { displayName: name });\n      \n      // Add user data to Firestore\n      await setDoc(doc(db, 'users', user.uid), {\n        uid: user.uid,\n        name,\n        email,\n        role,\n        createdAt: new Date().toISOString()\n      });\n      \n      // Request notification permission and save FCM token\n      const fcmToken = await requestNotificationPermission();\n      if (fcmToken) {\n        await setDoc(doc(db, 'users', user.uid), {\n          fcmToken\n        }, { merge: true });\n      }\n      \n      return user;\n    } catch (error) {\n      console.error('Error in register:', error);\n      throw error;\n    }\n  }\n\n  async function login(email, password) {\n    try {\n      const userCredential = await signInWithEmailAndPassword(auth, email, password);\n      \n      // After successful login, request notification permission and save FCM token\n      const fcmToken = await requestNotificationPermission();\n      if (fcmToken && userCredential.user) {\n        await setDoc(doc(db, 'users', userCredential.user.uid), {\n          fcmToken,\n          lastLogin: new Date().toISOString()\n        }, { merge: true });\n        \n        // Show welcome back notification\n        if (Notification.permission === 'granted') {\n          new Notification('Welcome back!', {\n            body: `You've successfully logged in to Car Booking App`,\n            icon: '/logo192.png'\n          });\n        }\n      }\n      \n      return userCredential.user;\n    } catch (error) {\n      console.error('Error in login:', error);\n      throw error;\n    }\n  }\n\n  function logout() {\n    return signOut(auth);\n  }\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async (user) => {\n      setCurrentUser(user);\n      \n      if (user) {\n        try {\n          // Get user role from Firestore\n          const userDoc = await getDoc(doc(db, 'users', user.uid));\n          if (userDoc.exists()) {\n            setUserRole(userDoc.data().role);\n          } else {\n            setUserRole('customer'); // Default role\n          }\n        } catch (error) {\n          console.error('Error fetching user role:', error);\n          setUserRole('customer'); // Default role on error\n        }\n      } else {\n        setUserRole(null);\n      }\n      \n      setLoading(false);\n    });\n\n    return unsubscribe;\n  }, []);\n\n  const value = {\n    currentUser,\n    userRole,\n    loading,\n    register,\n    login,\n    logout\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}