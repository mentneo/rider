{"ast":null,"code":"import { createUserWithEmailAndPassword, updateProfile, signInWithEmailAndPassword } from 'firebase/auth';\nimport { doc, getDoc, setDoc } from 'firebase/firestore';\nimport { auth, db } from '../firebase/config';\nimport { toast } from 'react-toastify';\n\n// Function to create or verify the admin account\nexport const setupAdminAccount = async () => {\n  const adminEmail = \"mentneo6@gmail.com\";\n  const adminPassword = \"itsmeiamabhi\";\n  const adminName = \"Admin User\";\n  try {\n    console.log('Attempting to set up admin account...');\n\n    // Try to sign in with admin credentials first\n    try {\n      const userCredential = await signInWithEmailAndPassword(auth, adminEmail, adminPassword);\n      console.log('Admin credentials valid, checking role...');\n\n      // Check if user has admin role and update if needed\n      await verifyAdminRole(userCredential.user.uid);\n      return true;\n    } catch (signInError) {\n      // If sign-in fails, the account might not exist, so try to create it\n      if (signInError.code === 'auth/user-not-found') {\n        console.log('Admin account does not exist, trying to create...');\n        return await createAdminAccount(adminEmail, adminPassword, adminName);\n      } else {\n        console.error('Error signing in with admin credentials:', signInError);\n        // Don't show toast for this error to avoid confusion during normal usage\n        return false;\n      }\n    }\n  } catch (error) {\n    console.error('Error in setupAdminAccount:', error);\n    // Don't show error to end users\n    return false;\n  }\n};\n\n// Helper function to create admin account\nconst createAdminAccount = async (email, password, name) => {\n  try {\n    // Create user with Firebase Auth\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n    const user = userCredential.user;\n\n    // Update profile with name\n    await updateProfile(user, {\n      displayName: name\n    });\n\n    // Store in Firestore\n    await setDoc(doc(db, 'users', user.uid), {\n      uid: user.uid,\n      name: name,\n      email: email,\n      role: 'admin',\n      createdAt: new Date().toISOString()\n    });\n    console.log('Admin account created successfully');\n    // Only show this toast in development environment\n    if (process.env.NODE_ENV === 'development') {\n      toast.success('Admin account created successfully');\n    }\n    return true;\n  } catch (error) {\n    console.error('Error creating admin account:', error);\n\n    // Only show error in development environment\n    if (process.env.NODE_ENV === 'development') {\n      if (error.code === 'auth/email-already-in-use') {\n        toast.warning('Admin email already exists but cannot be accessed. Please check Firebase console.');\n      } else {\n        toast.error('Failed to create admin account');\n      }\n    }\n    return false;\n  }\n};\n\n// Function to ensure admin has proper role in database\nexport const verifyAdminRole = async uid => {\n  try {\n    // Get the user document\n    const userRef = doc(db, 'users', uid);\n    const userSnap = await getDoc(userRef);\n\n    // Check if document exists and has the correct email\n    if (userSnap.exists()) {\n      const userData = userSnap.data();\n      if (userData.email === \"mentneo6@gmail.com\" && userData.role !== 'admin') {\n        // Update role to admin\n        await setDoc(userRef, {\n          role: 'admin',\n          updatedAt: new Date().toISOString()\n        }, {\n          merge: true\n        });\n        console.log('Updated user to admin role');\n      }\n    } else if (uid) {\n      // Create the user document if it doesn't exist\n      await setDoc(userRef, {\n        uid: uid,\n        email: \"mentneo6@gmail.com\",\n        name: \"Admin User\",\n        role: 'admin',\n        createdAt: new Date().toISOString()\n      });\n      console.log('Created admin user document');\n    }\n  } catch (error) {\n    console.error('Error verifying admin role:', error);\n  }\n};","map":{"version":3,"names":["createUserWithEmailAndPassword","updateProfile","signInWithEmailAndPassword","doc","getDoc","setDoc","auth","db","toast","setupAdminAccount","adminEmail","adminPassword","adminName","console","log","userCredential","verifyAdminRole","user","uid","signInError","code","createAdminAccount","error","email","password","name","displayName","role","createdAt","Date","toISOString","process","env","NODE_ENV","success","warning","userRef","userSnap","exists","userData","data","updatedAt","merge"],"sources":["/Users/yeduruabhiram/Desktop/chiru babai/src/utils/adminSetup.js"],"sourcesContent":["import { createUserWithEmailAndPassword, updateProfile, signInWithEmailAndPassword } from 'firebase/auth';\nimport { doc, getDoc, setDoc } from 'firebase/firestore';\nimport { auth, db } from '../firebase/config';\nimport { toast } from 'react-toastify';\n\n// Function to create or verify the admin account\nexport const setupAdminAccount = async () => {\n  const adminEmail = \"mentneo6@gmail.com\";\n  const adminPassword = \"itsmeiamabhi\";\n  const adminName = \"Admin User\";\n\n  try {\n    console.log('Attempting to set up admin account...');\n    \n    // Try to sign in with admin credentials first\n    try {\n      const userCredential = await signInWithEmailAndPassword(auth, adminEmail, adminPassword);\n      console.log('Admin credentials valid, checking role...');\n      \n      // Check if user has admin role and update if needed\n      await verifyAdminRole(userCredential.user.uid);\n      return true;\n    } catch (signInError) {\n      // If sign-in fails, the account might not exist, so try to create it\n      if (signInError.code === 'auth/user-not-found') {\n        console.log('Admin account does not exist, trying to create...');\n        return await createAdminAccount(adminEmail, adminPassword, adminName);\n      } else {\n        console.error('Error signing in with admin credentials:', signInError);\n        // Don't show toast for this error to avoid confusion during normal usage\n        return false;\n      }\n    }\n  } catch (error) {\n    console.error('Error in setupAdminAccount:', error);\n    // Don't show error to end users\n    return false;\n  }\n};\n\n// Helper function to create admin account\nconst createAdminAccount = async (email, password, name) => {\n  try {\n    // Create user with Firebase Auth\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n    const user = userCredential.user;\n    \n    // Update profile with name\n    await updateProfile(user, { displayName: name });\n    \n    // Store in Firestore\n    await setDoc(doc(db, 'users', user.uid), {\n      uid: user.uid,\n      name: name,\n      email: email,\n      role: 'admin',\n      createdAt: new Date().toISOString()\n    });\n    \n    console.log('Admin account created successfully');\n    // Only show this toast in development environment\n    if (process.env.NODE_ENV === 'development') {\n      toast.success('Admin account created successfully');\n    }\n    \n    return true;\n  } catch (error) {\n    console.error('Error creating admin account:', error);\n    \n    // Only show error in development environment\n    if (process.env.NODE_ENV === 'development') {\n      if (error.code === 'auth/email-already-in-use') {\n        toast.warning('Admin email already exists but cannot be accessed. Please check Firebase console.');\n      } else {\n        toast.error('Failed to create admin account');\n      }\n    }\n    return false;\n  }\n};\n\n// Function to ensure admin has proper role in database\nexport const verifyAdminRole = async (uid) => {\n  try {\n    // Get the user document\n    const userRef = doc(db, 'users', uid);\n    const userSnap = await getDoc(userRef);\n    \n    // Check if document exists and has the correct email\n    if (userSnap.exists()) {\n      const userData = userSnap.data();\n      if (userData.email === \"mentneo6@gmail.com\" && userData.role !== 'admin') {\n        // Update role to admin\n        await setDoc(userRef, { \n          role: 'admin',\n          updatedAt: new Date().toISOString()\n        }, { merge: true });\n        console.log('Updated user to admin role');\n      }\n    } else if (uid) {\n      // Create the user document if it doesn't exist\n      await setDoc(userRef, {\n        uid: uid,\n        email: \"mentneo6@gmail.com\",\n        name: \"Admin User\",\n        role: 'admin',\n        createdAt: new Date().toISOString()\n      });\n      console.log('Created admin user document');\n    }\n  } catch (error) {\n    console.error('Error verifying admin role:', error);\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}