{"ast":null,"code":"import { initializeApp } from 'firebase/app';\nimport { getAuth, GoogleAuthProvider, OAuthProvider } from 'firebase/auth';\nimport { getFirestore } from 'firebase/firestore';\nimport { getStorage } from 'firebase/storage';\nimport { getMessaging, getToken, onMessage } from 'firebase/messaging';\n\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyA6S5CmwHb-5wN1waHLePJuU6CCDJCtkGQ\",\n  authDomain: \"ridebooking-849fe.firebaseapp.com\",\n  projectId: \"ridebooking-849fe\",\n  storageBucket: \"ridebooking-849fe.firebasestorage.app\",\n  messagingSenderId: \"580980020549\",\n  appId: \"1:580980020549:web:53d0783d04eac334b81a2c\",\n  measurementId: \"G-6PMYEHZP8M\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\nconst db = getFirestore(app);\nconst storage = getStorage(app);\n\n// Initialize providers for social login\nconst googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nconst appleProvider = new OAuthProvider('apple.com');\nappleProvider.addScope('email');\nappleProvider.addScope('name');\n\n// Initialize Firebase Cloud Messaging\nlet messaging = null;\n\n// We need to check if we're in a browser environment and if it supports service workers\ntry {\n  if (typeof window !== 'undefined' && 'serviceWorker' in navigator) {\n    messaging = getMessaging(app);\n  }\n} catch (error) {\n  console.error('Firebase messaging error:', error);\n}\n\n// Function to request notification permission and get FCM token\nconst requestNotificationPermission = async () => {\n  if (!messaging) return null;\n  try {\n    const permission = await Notification.requestPermission();\n    if (permission === 'granted') {\n      // Get FCM token\n      const token = await getToken(messaging, {\n        vapidKey: 'YOUR_VAPID_KEY' // You'll need to replace this with your actual VAPID key\n      });\n      console.log('FCM Token:', token);\n      return token;\n    } else {\n      console.log('Notification permission denied');\n      return null;\n    }\n  } catch (error) {\n    console.error('Error getting notification permission:', error);\n    return null;\n  }\n};\n\n// Function to handle foreground messages\nconst onMessageListener = () => {\n  return new Promise(resolve => {\n    if (!messaging) {\n      resolve(null);\n      return;\n    }\n    onMessage(messaging, payload => {\n      resolve(payload);\n    });\n  });\n};\nexport { auth, db, storage, messaging, googleProvider, appleProvider, requestNotificationPermission, onMessageListener };","map":{"version":3,"names":["initializeApp","getAuth","GoogleAuthProvider","OAuthProvider","getFirestore","getStorage","getMessaging","getToken","onMessage","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","auth","db","storage","googleProvider","setCustomParameters","prompt","appleProvider","addScope","messaging","window","navigator","error","console","requestNotificationPermission","permission","Notification","requestPermission","token","vapidKey","log","onMessageListener","Promise","resolve","payload"],"sources":["/Users/yeduruabhiram/Desktop/chiru babai/src/firebase/config.js"],"sourcesContent":["import { initializeApp } from 'firebase/app';\nimport { getAuth, GoogleAuthProvider, OAuthProvider } from 'firebase/auth';\nimport { getFirestore } from 'firebase/firestore';\nimport { getStorage } from 'firebase/storage';\nimport { getMessaging, getToken, onMessage } from 'firebase/messaging';\n\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyA6S5CmwHb-5wN1waHLePJuU6CCDJCtkGQ\",\n  authDomain: \"ridebooking-849fe.firebaseapp.com\",\n  projectId: \"ridebooking-849fe\",\n  storageBucket: \"ridebooking-849fe.firebasestorage.app\",\n  messagingSenderId: \"580980020549\",\n  appId: \"1:580980020549:web:53d0783d04eac334b81a2c\",\n  measurementId: \"G-6PMYEHZP8M\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\nconst db = getFirestore(app);\nconst storage = getStorage(app);\n\n// Initialize providers for social login\nconst googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({ prompt: 'select_account' });\n\nconst appleProvider = new OAuthProvider('apple.com');\nappleProvider.addScope('email');\nappleProvider.addScope('name');\n\n// Initialize Firebase Cloud Messaging\nlet messaging = null;\n\n// We need to check if we're in a browser environment and if it supports service workers\ntry {\n  if (typeof window !== 'undefined' && 'serviceWorker' in navigator) {\n    messaging = getMessaging(app);\n  }\n} catch (error) {\n  console.error('Firebase messaging error:', error);\n}\n\n// Function to request notification permission and get FCM token\nconst requestNotificationPermission = async () => {\n  if (!messaging) return null;\n  \n  try {\n    const permission = await Notification.requestPermission();\n    \n    if (permission === 'granted') {\n      // Get FCM token\n      const token = await getToken(messaging, {\n        vapidKey: 'YOUR_VAPID_KEY' // You'll need to replace this with your actual VAPID key\n      });\n      \n      console.log('FCM Token:', token);\n      return token;\n    } else {\n      console.log('Notification permission denied');\n      return null;\n    }\n  } catch (error) {\n    console.error('Error getting notification permission:', error);\n    return null;\n  }\n};\n\n// Function to handle foreground messages\nconst onMessageListener = () => {\n  return new Promise((resolve) => {\n    if (!messaging) {\n      resolve(null);\n      return;\n    }\n    \n    onMessage(messaging, (payload) => {\n      resolve(payload);\n    });\n  });\n};\n\nexport { \n  auth, \n  db, \n  storage, \n  messaging, \n  googleProvider,\n  appleProvider,\n  requestNotificationPermission, \n  onMessageListener \n};\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SAASC,OAAO,EAAEC,kBAAkB,EAAEC,aAAa,QAAQ,eAAe;AAC1E,SAASC,YAAY,QAAQ,oBAAoB;AACjD,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,YAAY,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,oBAAoB;;AAEtE;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,mCAAmC;EAC/CC,SAAS,EAAE,mBAAmB;EAC9BC,aAAa,EAAE,uCAAuC;EACtDC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE,2CAA2C;EAClDC,aAAa,EAAE;AACjB,CAAC;;AAED;AACA,MAAMC,GAAG,GAAGjB,aAAa,CAACS,cAAc,CAAC;AACzC,MAAMS,IAAI,GAAGjB,OAAO,CAACgB,GAAG,CAAC;AACzB,MAAME,EAAE,GAAGf,YAAY,CAACa,GAAG,CAAC;AAC5B,MAAMG,OAAO,GAAGf,UAAU,CAACY,GAAG,CAAC;;AAE/B;AACA,MAAMI,cAAc,GAAG,IAAInB,kBAAkB,CAAC,CAAC;AAC/CmB,cAAc,CAACC,mBAAmB,CAAC;EAAEC,MAAM,EAAE;AAAiB,CAAC,CAAC;AAEhE,MAAMC,aAAa,GAAG,IAAIrB,aAAa,CAAC,WAAW,CAAC;AACpDqB,aAAa,CAACC,QAAQ,CAAC,OAAO,CAAC;AAC/BD,aAAa,CAACC,QAAQ,CAAC,MAAM,CAAC;;AAE9B;AACA,IAAIC,SAAS,GAAG,IAAI;;AAEpB;AACA,IAAI;EACF,IAAI,OAAOC,MAAM,KAAK,WAAW,IAAI,eAAe,IAAIC,SAAS,EAAE;IACjEF,SAAS,GAAGpB,YAAY,CAACW,GAAG,CAAC;EAC/B;AACF,CAAC,CAAC,OAAOY,KAAK,EAAE;EACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;AACnD;;AAEA;AACA,MAAME,6BAA6B,GAAG,MAAAA,CAAA,KAAY;EAChD,IAAI,CAACL,SAAS,EAAE,OAAO,IAAI;EAE3B,IAAI;IACF,MAAMM,UAAU,GAAG,MAAMC,YAAY,CAACC,iBAAiB,CAAC,CAAC;IAEzD,IAAIF,UAAU,KAAK,SAAS,EAAE;MAC5B;MACA,MAAMG,KAAK,GAAG,MAAM5B,QAAQ,CAACmB,SAAS,EAAE;QACtCU,QAAQ,EAAE,gBAAgB,CAAC;MAC7B,CAAC,CAAC;MAEFN,OAAO,CAACO,GAAG,CAAC,YAAY,EAAEF,KAAK,CAAC;MAChC,OAAOA,KAAK;IACd,CAAC,MAAM;MACLL,OAAO,CAACO,GAAG,CAAC,gCAAgC,CAAC;MAC7C,OAAO,IAAI;IACb;EACF,CAAC,CAAC,OAAOR,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;IAC9D,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA,MAAMS,iBAAiB,GAAGA,CAAA,KAAM;EAC9B,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;IAC9B,IAAI,CAACd,SAAS,EAAE;MACdc,OAAO,CAAC,IAAI,CAAC;MACb;IACF;IAEAhC,SAAS,CAACkB,SAAS,EAAGe,OAAO,IAAK;MAChCD,OAAO,CAACC,OAAO,CAAC;IAClB,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC;AAED,SACEvB,IAAI,EACJC,EAAE,EACFC,OAAO,EACPM,SAAS,EACTL,cAAc,EACdG,aAAa,EACbO,6BAA6B,EAC7BO,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}